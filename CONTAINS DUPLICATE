class Solution {
    public boolean containsDuplicate(int[] nums) {
        Set<Integer>visited=new HashSet<>();
        for(int i=0;i<nums.length;i++){
            if(visited.contains(nums[i])){
                return true;
            }
            else{
                visited.add(nums[i]);
            }
        }
        return false;
        
    }
}

Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

 

Example 1:

Input: nums = [1,2,3,1]

Output: true

Explanation:

The element 1 occurs at the indices 0 and 3.

Example 2:

Input: nums = [1,2,3,4]

Output: false

Explanation:

All elements are distinct.

Example 3:

Input: nums = [1,1,1,3,3,4,3,2,4,2]

Output: true

 

Constraints:

1 <= nums.length <= 105
-109 <= nums[i] <= 109


explanation:


int[] nums = {1, 2, 3, 4, 5, 3};
Execution Steps:
Initial Setup:

The visited set is empty: {}.
Iteration 1 (i = 0):

Current element: nums[0] = 1.
Check if visited.contains(1):
Result: false (1 is not in the set).
Add 1 to the set: visited = {1}.
Iteration 2 (i = 1):

Current element: nums[1] = 2.
Check if visited.contains(2):
Result: false (2 is not in the set).
Add 2 to the set: visited = {1, 2}.
Iteration 3 (i = 2):

Current element: nums[2] = 3.
Check if visited.contains(3):
Result: false (3 is not in the set).
Add 3 to the set: visited = {1, 2, 3}.
Iteration 4 (i = 3):

Current element: nums[3] = 4.
Check if visited.contains(4):
Result: false (4 is not in the set).
Add 4 to the set: visited = {1, 2, 3, 4}.
Iteration 5 (i = 4):

Current element: nums[4] = 5.
Check if visited.contains(5):
Result: false (5 is not in the set).
Add 5 to the set: visited = {1, 2, 3, 4, 5}.
Iteration 6 (i = 5):

Current element: nums[5] = 3.
Check if visited.contains(3):
Result: true (3 is already in the set).
Return true immediately.
Output:
The method returns true because the array contains a duplicate element (3).
