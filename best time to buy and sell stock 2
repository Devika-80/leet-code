You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.

Find and return the maximum profit you can achieve.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Total profit is 4 + 3 = 7.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Total profit is 4.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.
 

Constraints:

1 <= prices.length <= 3 * 104
0 <= prices[i] <= 104

class Solution {
    public int maxProfit(int[] prices) {
        int max = 0;
        int start = prices[0];
        int len = prices.length;
        for(int i = 1;i<len; i++){
            if(start < prices[i]) max += prices[i] - start;
            start = prices[i];
        }
        return max;
    }
}

explanation:
Initial Setup:

max = 0 (Maximum profit initialized to 0)
start = prices[0] = 7 (Starting price is the price on the first day)
len = prices.length = 6 (Length of the prices array)
prices array = [7, 1, 5, 3, 6, 4]
The for loop iterates from i = 1 to i = 5 (since len = 6):

i = 1: prices[i] = 1

start < prices[i]? No (7 is not less than 1)
start is updated to 1.
max remains 0.
i = 2: prices[i] = 5

start < prices[i]? Yes (1 is less than 5)
max += prices[i] - start = 0 + (5 - 1) = 4.
start is updated to 5.
i = 3: prices[i] = 3

start < prices[i]? No (5 is not less than 3)
start is updated to 3.
max remains 4.
i = 4: prices[i] = 6

start < prices[i]? Yes (3 is less than 6)
max += prices[i] - start = 4 + (6 - 3) = 7.
start is updated to 6.
i = 5: prices[i] = 4

start < prices[i]? No (6 is not less than 4)
start is updated to 4.
max remains 7.
End of loop, the method returns max = 7.
