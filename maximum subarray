Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
Example 2:

Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104

program:
 class Solution {
    public int maxSubArray(int[] nums) {
     int cursum=0;
     int maxsum=nums[0];
     for(int i=0;i<nums.length;i++){
        if(cursum<0){
            cursum=0;
        }
        cursum=cursum+nums[i];
        maxsum=Math.max(cursum,maxsum);
     }  
     return maxsum; 
    }
}

explanation:
Example Walkthrough:
Input:
java
Copy code
nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4];
Step-by-Step Execution:
Index (i)	nums[i]	cursum (current sum)	maxsum (max sum)
0	-2	0 (reset to 0)	-2
1	1	1	1
2	-3	-2 (reset to 0)	1
3	4	4	4
4	-1	3	4
5	2	5	5
6	1	6	6
7	-5	1	6
8	4	5	6
Output:
java
Copy code
maxsum = 6;
The maximum subarray is [4, -1, 2, 1].
