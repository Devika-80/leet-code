class Solution {
    public int maxProfit(int[] prices) {
        int buyPrice = prices[0];
        int profit = 0;

        for (int i = 1; i < prices.length; i++) {
            if (buyPrice > prices[i]) {
                buyPrice = prices[i];
            }

            profit = Math.max(profit, prices[i] - buyPrice);
        }

        return profit;        
    }
}



question:



You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.



Explanation:

int[] prices = {7, 1, 5, 3, 6, 4};
Execution Steps:
Initialization:

buyPrice = 7
profit = 0
Iteration:

Day 1 (i = 1, price = 1):
buyPrice > prices[i]: 7 > 1 → Update buyPrice = 1.
profit = Math.max(0, 1 - 1) = 0.
Day 2 (i = 2, price = 5):
buyPrice > prices[i]: 1 > 5 → No change to buyPrice.
profit = Math.max(0, 5 - 1) = 4.
Day 3 (i = 3, price = 3):
buyPrice > prices[i]: 1 > 3 → No change to buyPrice.
profit = Math.max(4, 3 - 1) = 4.
Day 4 (i = 4, price = 6):
buyPrice > prices[i]: 1 > 6 → No change to buyPrice.
profit = Math.max(4, 6 - 1) = 5.
Day 5 (i = 5, price = 4):
buyPrice > prices[i]: 1 > 4 → No change to buyPrice.
profit = Math.max(5, 4 - 1) = 5.
Final Output:

profit = 5.
Output:
java
Copy code
5
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 104
